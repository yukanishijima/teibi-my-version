/* eslint-disable prettier/prettier */
/* eslint-disable quotes */
// #!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('teibi:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * socket.io set up
 */

const socketIO = require('socket.io');
const io = socketIO(server);
let rooms = {};
let room = "";

io.on("connection", socket => {
  console.log("user connected");

  // once connected, emit test event to client
  socket.emit("connection test", "user connected");

  // catch event from client and emit back to client inside that room
  socket.on("joinRoom", userInfo => {
    room = userInfo.room;

    // join the room
    socket.join("room " + room);

    // pupolate rooms object
    if (typeof rooms[room] === "undefined") {
      rooms[room] = {};
    }
    if (typeof rooms[room][socket.id] === "undefined") {
      rooms[room][socket.id] = {
        // userName: "randomNameFunc" + Date.now(),
        userName: userInfo.username,
        lat: 0,
        lon: 0,
        status: "Selecting..."
      };
    }

    // send rooms object to client
    io.nsps["/"].to("room " + room).emit("joinRoom", rooms);

    console.log(rooms);
    console.log(
      `${io.nsps["/"].adapter.rooms["room " + room].length} clients are inside room ${userInfo.room}`
    );
  });

  socket.on("selected", updatedUserInfo => {
    console.log(updatedUserInfo);
    rooms[room][socket.id].lat = updatedUserInfo.lat;
    rooms[room][socket.id].lon = updatedUserInfo.lon;
    rooms[room][socket.id].status = updatedUserInfo.status;
    io.nsps["/"].to("room " + room).emit("selected", rooms);
  });

  socket.on("disconnecting", () => {
    console.log("disconnecting");
  });

  socket.on("disconnect", () => {
    console.log("disconnected");
    delete rooms[room][socket.id];
    io.nsps["/"].to("room " + room).emit("disconnecting", rooms);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}
