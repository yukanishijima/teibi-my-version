#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('teibi:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * socket.io set up
 */

const socketIO = require('socket.io');
const io = socketIO(server);

// socket namespace + room
io.of("/").on("connection", socket => {
  console.log('user connected');

  // once connected, emit test event to client
  socket.emit("connection test", "user connected");

  // catch status event from client and emit back to client inside that room
  socket.on("joinRoom", userInfo => {
    console.log(userInfo);

    // if (io.nsps['/'].adapter.rooms["room-" + userInfo.room] && io.nsps['/'].adapter.rooms["room-" + userInfo.room].length === 1) {
    //   // assign user as user 1
    //   userInfo.user = "user1";
    //   console.log(userInfo);
    // }
    // console.log(userInfo);

    // join the room
    socket.join("room " + userInfo.room);

    // emit joinRoom event back to clients inside that room only1
    socket.emit("joinRoom", userInfo);

    console.log(`${io.nsps['/'].adapter.rooms["room " + userInfo.room].length} clients are inside room ${userInfo.room}`);

  })

  // FUTURE DEV: use below to limit the number of clients in one room!
  // if a room exists & there're more than 1 user in that room, change the room name
  // if (io.nsps['/'].adapter.rooms["room-" + room] && io.nsps['/'].adapter.rooms["room-" + room].length > 1) {
  //   //change the room name here
  // }

  socket.on('disconnect', () => {
    console.log('user disconnected')
  })
});




/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
